---
description: info about RealityKit
globs: 
---

---


```markdown
# RealityKit Best Practices

RealityKit is the primary framework for rendering 3D content on visionOS. Use it to create, animate, and interact with 3D entities while relying on system‑optimized features.

### Key Guidelines

- **Use RealityKit for 3D Content:**  
  When displaying 3D models or spatial animations, prefer RealityKit over lower‑level graphics APIs.

- **Integrate with SwiftUI via RealityView:**  
  Embed RealityKit scenes into your SwiftUI hierarchy using containers like `RealityView`.

- **Configure AR Sessions Properly:**  
  For AR-based experiences, use ARKit’s world tracking and plane detection to anchor your 3D content.

### Example

This example shows an ARView subclass that runs a basic AR session and loads a RealityKit scene (commonly generated by Reality Composer Pro):

```swift
import UIKit
import RealityKit
import ARKit

class MyARView: ARView {
    required init(frame frameRect: CGRect) {
        super.init(frame: frameRect)
        // Configure AR session
        let config = ARWorldTrackingConfiguration()
        config.planeDetection = [.horizontal, .vertical]
        session.run(config)

        // Load a RealityKit scene (e.g. from a Reality Composer Pro project)
        do {
            let boxAnchor = try Experience.loadBox() // 'Experience' is the auto‑generated scene name
            scene.anchors.append(boxAnchor)
        } catch {
            print("Failed to load the scene: \(error)")
        }
    }

    @objc required dynamic init?(coder decoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}
